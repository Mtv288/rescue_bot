
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.keyboards.inline_buttons import start_menu_keyboard, main_menu_keyboard, admin_menu_keyboard
from bot.states import Registration
from bot.database.base import Session
from bot.database.models import User

router = Router()

@router.message(Command("start"))
async def start_handler(message: types.Message):
    # –ü—Ä–∏ –ª—é–±–æ–º –∑–∞–ø—É—Å–∫–µ /start –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–ø–∞—Å–∞—Ç–µ–ª–µ–π.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=start_menu_keyboard()
    )

@router.callback_query(F.data == "login")
async def login_callback(callback: types.CallbackQuery):
    session = Session()
    user = session.query(User).filter_by(tg_id=callback.from_user.id).first()

    if not user:
        # –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await callback.message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª."
        )
    elif not user.approved:
        # –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
        await callback.message.answer(
            "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞."
        )
    else:
        # –û–¥–æ–±—Ä–µ–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ —Ä–æ–ª–∏
        if user.role == "admin":
            await callback.message.answer(
                f"üë§ –ü—Ä–∏–≤–µ—Ç, {user.call_sign}! –≠—Ç–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é:",
                reply_markup=admin_menu_keyboard()
            )
        else:
            await callback.message.answer(
                f"üë§ –ü—Ä–∏–≤–µ—Ç, {user.call_sign}! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:",
                reply_markup=main_menu_keyboard(user.role)
            )

    session.close()
    await callback.answer()

@router.callback_query(F.data == "register")
async def register_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "‚úçÔ∏è –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    await state.set_state(Registration.name)
    await callback.answer()

