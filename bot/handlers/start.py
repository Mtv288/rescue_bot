from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from bot.keyboards.inline_buttons import start_menu_keyboard, main_menu_keyboard, admin_menu_keyboard
from bot.states import Registration
from bot.database.base import Session
from bot.database.models import User

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
@router.message(Command("start"))
async def start_handler(message: Message):
    session = Session()
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()

    if not user:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∂–∏ –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏" –∏ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–ø–∞—Å–∞—Ç–µ–ª–µ–π.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=start_menu_keyboard()
        )
    elif not user.approved:
        await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂–∏ –Ω—É–∂–Ω–æ–µ –º–µ–Ω—é –ø–æ —Ä–æ–ª–∏
        if user.role == "admin":
            await message.answer(
                f"üë§ –ü—Ä–∏–≤–µ—Ç, {user.call_sign}! –≠—Ç–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é:",
                reply_markup=admin_menu_keyboard()
            )
        else:
            await message.answer(
                f"üë§ –ü—Ä–∏–≤–µ—Ç, {user.call_sign}! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:",
                reply_markup=main_menu_keyboard(user.role)
            )
    session.close()

# –õ–æ–≥–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏"
@router.callback_query(F.data == "login")
async def login_callback(callback: types.CallbackQuery):
    session = Session()
    user = session.query(User).filter_by(tg_id=callback.from_user.id).first()

    if not user:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª.")
    elif not user.approved:
        await callback.message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    else:
        if user.role == "admin":
            await callback.message.answer(
                f"üë§ –ü—Ä–∏–≤–µ—Ç, {user.call_sign}! –≠—Ç–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é:",
                reply_markup=admin_menu_keyboard()
            )
        else:
            await callback.message.answer(
                f"üë§ –ü—Ä–∏–≤–µ—Ç, {user.call_sign}! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:",
                reply_markup=main_menu_keyboard(user.role)
            )
    session.close()
    await callback.answer()

# –õ–æ–≥–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
@router.callback_query(F.data == "register")
async def register_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚úçÔ∏è –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(Registration.name)
    await callback.answer()
