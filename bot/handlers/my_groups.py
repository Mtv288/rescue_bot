from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from bot.database.base import Session
from bot.database.models import Group, Task, User

router = Router()

@router.message(F.text == "/–º–æ–∏–≥—Ä—É–ø–ø—ã")
async def show_my_groups(message: Message):
    session = Session()
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()
    if not user or user.role not in ["snm", "spg"]:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–ù–ú –∏ –°–ü–ì")
        return

    groups = session.query(Group).filter_by(leader_id=user.id).all()
    if not groups:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø")
    else:
        text = "üìã –í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n"
        for group in groups:
            text += f"ID: {group.id} ‚Äî {group.name}\n"
        await message.answer(text + "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∑–∞–¥–∞—á–∏ <ID> —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–¥–∞—á–∏")
    session.close()

@router.message(F.text.startswith("/–∑–∞–¥–∞—á–∏"))
async def show_group_tasks(message: Message):
    try:
        _, group_id = message.text.split()
        group_id = int(group_id)
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–∑–∞–¥–∞—á–∏ <ID –≥—Ä—É–ø–ø—ã>")
        return

    session = Session()
    tasks = session.query(Task).filter_by(group_id=group_id).all()
    if not tasks:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã")
        return

    for task in tasks:
        status = "‚úÖ" if task.completed else "‚ùó"
        markup = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚úÖ", callback_data=f"complete:{task.id}")
            ]] if not task.completed else []
        )
        await message.answer(f"{status} –ó–∞–¥–∞—á–∞ #{task.id}: {task.description}", reply_markup=markup)
    session.close()

@router.callback_query(F.data.startswith("complete:"))
async def complete_task_button(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])
    session = Session()
    task = session.query(Task).filter_by(id=task_id).first()
    if task and not task.completed:
        task.completed = True
        session.commit()
        await callback.message.edit_text(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task.id}: {task.description}\n(–≤—ã–ø–æ–ª–Ω–µ–Ω–∞)")
    else:
        await callback.answer("–ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    session.close()
