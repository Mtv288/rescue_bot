from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from bot.database.base import Session
from bot.database.models import Group, Task, User
from bot.states import AssignGroup

router = Router()

@router.message(F.text == "/–º–æ–∏ –≥—Ä—É–ø–ø—ã")
async def show_my_groups(message: Message):
    session = Session()
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()
    if not user or user.role not in ["snm", "spg"]:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°–ù–ú –∏ –°–ü–ì")
        session.close()
        return

    groups = session.query(Group).filter_by(leader_id=user.id).all()
    if not groups:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø")
    else:
        text = "üìã –í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n"
        for group in groups:
            text += f"ID: {group.id} ‚Äî {group.name}\n"
        await message.answer(text + "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∑–∞–¥–∞—á–∏ <ID> —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–¥–∞—á–∏")
    session.close()

@router.message(F.text.startswith("/–∑–∞–¥–∞—á–∏"))
async def show_group_tasks(message: Message):
    try:
        _, group_id = message.text.split()
        group_id = int(group_id)
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–∑–∞–¥–∞—á–∏ <ID –≥—Ä—É–ø–ø—ã>")
        return

    session = Session()
    tasks = session.query(Task).filter_by(group_id=group_id).all()
    if not tasks:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã")
        session.close()
        return

    for task in tasks:
        status = "‚úÖ" if task.completed else "‚ùó"
        markup = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚úÖ", callback_data=f"complete:{task.id}")
            ]] if not task.completed else []
        )
        await message.answer(f"{status} –ó–∞–¥–∞—á–∞ #{task.id}: {task.description}", reply_markup=markup)
    session.close()

@router.callback_query(F.data.startswith("complete:"))
async def complete_task_button(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])
    session = Session()
    task = session.query(Task).filter_by(id=task_id).first()
    if task and not task.completed:
        task.completed = True
        session.commit()
        await callback.message.edit_text(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task.id}: {task.description}\n(–≤—ã–ø–æ–ª–Ω–µ–Ω–∞)")
    else:
        await callback.answer("–ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    session.close()

@router.callback_query(F.data == "add_group")
async def add_group_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:")
    await state.set_state(AssignGroup.group_name)
    await callback.answer()

@router.message(AssignGroup.group_name)
async def process_group_name(message: Message, state: FSMContext):
    group_name = message.text.strip()
    if not group_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(group_name=group_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ª–∏–¥–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã:")
    await state.set_state(AssignGroup.leader_id)

@router.message(AssignGroup.leader_id)
async def process_group_leader(message: Message, state: FSMContext):
    leader_input = message.text.strip()
    session = Session()

    user = None
    if leader_input.isdigit():
        user = session.query(User).filter_by(id=int(leader_input)).first()
    if not user:
        user = session.query(User).filter_by(call_sign=leader_input).first()

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π:")
        session.close()
        return

    data = await state.get_data()
    group_name = data.get("group_name")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É —ç—Ç–æ–≥–æ –ª–∏–¥–µ—Ä–∞
    existing_group = session.query(Group).filter_by(name=group_name, leader_id=user.id).first()
    if existing_group:
        await message.answer(f"–ì—Ä—É–ø–ø–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{group_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –ª–∏–¥–µ—Ä–∞ {user.call_sign}.")
        session.close()
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
    new_group = Group(name=group_name, leader_id=user.id)
    session.add(new_group)
    session.commit()

    leader_call_sign = user.call_sign
    session.close()

    await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å –ª–∏–¥–µ—Ä–æ–º {leader_call_sign}!")
    await state.clear()
