from aiogram import Router, F, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.states import AssignTask
from bot.database.base import Session
from bot.database.models import User, Group, Task

router = Router()

# üìå –ú–µ–Ω—é –∑–∞–¥–∞—á
@router.message(F.text == "/–∑–∞–¥–∞—á–∏")
async def show_task_menu(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –ó–∞–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")],
        [InlineKeyboardButton(text="üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", callback_data="view_pending_users")]
    ])
    await message.answer("–ú–µ–Ω—é –∑–∞–¥–∞—á –∏ –∑–∞—è–≤–æ–∫:", reply_markup=keyboard)

# üöÄ –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
@router.callback_query(F.data == "create_task")
async def select_group(callback: CallbackQuery, state: FSMContext):
    session = Session()
    admin = session.query(User).filter_by(tg_id=callback.from_user.id).first()
    groups = session.query(Group).filter(
        (Group.leader_id == admin.id) |
        (admin.role == "—à–µ—Ñ")
    ).all()
    session.close()

    if not groups:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø.")
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=group.name, callback_data=f"choose_group:{group.id}")]
        for group in groups
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
    await callback.answer()

# üìù –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.callback_query(F.data.startswith("choose_group:"))
async def input_task_description(callback: CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split(":")[1])
    await state.update_data(group_id=group_id)
    await state.set_state(AssignTask.task)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await callback.answer()

# ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@router.message(AssignTask.task)
async def save_task(message: Message, state: FSMContext):
    data = await state.get_data()
    session = Session()
    task = Task(group_id=data["group_id"], description=message.text)
    session.add(task)
    session.commit()
    group = session.query(Group).filter_by(id=data["group_id"]).first()
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã: {group.name}")
    session.close()
    await state.clear()

# üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
@router.callback_query(F.data == "view_pending_users")
async def view_pending_users(callback: CallbackQuery):
    session = Session()
    pending = session.query(User).filter_by(approved=False).all()

    if not pending:
        await callback.message.answer("‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
    else:
        for user in pending:
            buttons = [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_user:{user.id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_user:{user.id}")
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
            await callback.message.answer(
                f"üÜï –ó–∞—è–≤–∫–∞ –æ—Ç:\n"
                f"ID: {user.id}\n"
                f"–ü–æ–∑—ã–≤–Ω–æ–π: {user.call_sign}\n"
                f"Tg ID: {user.tg_id}",
                reply_markup=keyboard
            )
    session.close()
    await callback.answer()

# ‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("approve_user:"))
async def approve_user_callback(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    session = Session()
    user = session.query(User).filter_by(id=user_id).first()

    if user:
        user.approved = True
        session.commit()
        await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.call_sign} –æ–¥–æ–±—Ä–µ–Ω.")
    else:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    session.close()
    await callback.answer()

# ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("reject_user:"))
async def reject_user_callback(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    session = Session()
    user = session.query(User).filter_by(id=user_id).first()

    if user:
        session.delete(user)
        session.commit()
        await callback.message.edit_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.")
    else:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    session.close()
    await callback.answer()
