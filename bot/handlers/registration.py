from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.keyboards.inline_buttons import main_menu_keyboard
from bot.states import Registration
from bot.database.base import Session
from bot.database.models import User

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è"), KeyboardButton(text="üìç –ú–µ—Å—Ç–æ —Å–±–æ—Ä–∞")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )

@router.message(F.text == "üìã –ú–µ–Ω—é")
async def show_main_menu(message: Message):
    session = Session()
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()
    session.close()

    if not user:
        return await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")

    await message.answer(
        text=f"üëã –ü—Ä–∏–≤–µ—Ç, {user.call_sign}! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard(user.role)
    )

# –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Command("register"))
async def register_start(message: Message, state: FSMContext):
    session = Session()
    existing = session.query(User).filter_by(tg_id=message.from_user.id).first()
    session.close()
    if existing:
        await message.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(Registration.name)

# –®–∞–≥ 1: –∏–º—è
@router.message(Registration.name, F.text)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("üî§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∑—ã–≤–Ω–æ–π:")
    await state.set_state(Registration.call_sign)

# –®–∞–≥ 2: –ø–æ–∑—ã–≤–Ω–æ–π
@router.message(Registration.call_sign, F.text)
async def register_call_sign(message: Message, state: FSMContext):
    await state.update_data(call_sign=message.text.strip())
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1990):")
    await state.set_state(Registration.birth_year)

# –®–∞–≥ 3: –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è
@router.message(Registration.birth_year, F.text)
async def register_birth_year(message: Message, state: FSMContext):
    try:
        birth_year = int(message.text.strip())
        if birth_year < 1900 or birth_year > 2025:
            raise ValueError()
    except ValueError:
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1995).")

    await state.update_data(birth_year=birth_year)
    data = await state.get_data()

    session = Session()
    existing = session.query(User).filter_by(tg_id=message.from_user.id).first()
    if existing:
        await message.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        session.close()
        await state.clear()
        return

    user = User(
        tg_id=message.from_user.id,
        name=data["name"],
        call_sign=data["call_sign"],
        birth_year=data["birth_year"],
        approved=False,
        role="pending"
    )
    session.add(user)
    session.commit()
    session.close()

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. ‚è≥")
    await state.clear()
